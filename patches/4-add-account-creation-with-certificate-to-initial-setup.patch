From aa7ad8f98701222101214b9105ca45b947c10a6f Mon Sep 17 00:00:00 2001
From: intika <intika@librefox.org>
Date: Mon, 3 Feb 2020 05:13:08 +0100
Subject: [PATCH] add-account-creation-with-certificate-to-initial-setup

---
 .../pixart/messenger/ui/WelcomeActivity.java  | 54 +++++++++++++++----
 1 file changed, 43 insertions(+), 11 deletions(-)

diff --git a/src/main/java/de/pixart/messenger/ui/WelcomeActivity.java b/src/main/java/de/pixart/messenger/ui/WelcomeActivity.java
index 44d391522..db7dfb5ee 100644
--- a/src/main/java/de/pixart/messenger/ui/WelcomeActivity.java
+++ b/src/main/java/de/pixart/messenger/ui/WelcomeActivity.java
@@ -34,7 +34,13 @@
 import static de.pixart.messenger.utils.PermissionUtils.allGranted;
 import static de.pixart.messenger.utils.PermissionUtils.readGranted;
 
-public class WelcomeActivity extends XmppActivity {
+import android.security.KeyChain;
+import android.security.KeyChainAliasCallback;
+import android.util.Log;
+import android.content.ActivityNotFoundException;
+import de.pixart.messenger.services.XmppConnectionService;
+
+public class WelcomeActivity extends XmppActivity implements KeyChainAliasCallback, XmppConnectionService.OnAccountCreated {
 
     private static final int REQUEST_IMPORT_BACKUP = 0x63fb;
     private static final int REQUEST_READ_EXTERNAL_STORAGE = 0XD737;
@@ -122,15 +128,10 @@ protected void onCreate(final Bundle savedInstanceState) {
         }
         binding.importDatabase.setOnClickListener(v -> startActivity(new Intent(this, ImportBackupActivity.class)));
         binding.addNewAccount.setOnClickListener(v -> {
-            final Intent intent = new Intent(WelcomeActivity.this, MagicCreateActivity.class);
-            intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
-            addInviteUri(intent);
-            startActivity(intent);
-        });
-        if (DISALLOW_REGISTRATION_IN_UI) {
-            binding.addNewAccount.setVisibility(View.GONE);
-        }
-        binding.addAccountWithCertificate.setOnClickListener(v -> {
+            //final Intent intent = new Intent(WelcomeActivity.this, MagicCreateActivity.class); //old register account
+            //intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
+            //addInviteUri(intent);
+            //startActivity(intent);            
             final List<Account> accounts = xmppConnectionService.getAccounts();
             Intent intent = new Intent(WelcomeActivity.this, EditAccountActivity.class);
             if (accounts.size() == 1) {
@@ -146,6 +147,37 @@ protected void onCreate(final Bundle savedInstanceState) {
             finish();
             overridePendingTransition(R.animator.fade_in, R.animator.fade_out);
         });
+        if (DISALLOW_REGISTRATION_IN_UI) {
+            binding.addNewAccount.setVisibility(View.GONE);
+        }
+        binding.addAccountWithCertificate.setOnClickListener(v -> {
+                        try {
+                KeyChain.choosePrivateKeyAlias(this, this, null, null, null, -1, null);
+                } catch (ActivityNotFoundException e) {
+                Toast.makeText(this, R.string.device_does_not_support_certificates, Toast.LENGTH_LONG).show();
+                }
+        });
+    }
+
+        @Override
+        public void alias(String alias) {
+                if (alias != null) {
+                        xmppConnectionService.createAccountFromKey(alias, this);
+                }
+        }
+
+    @Override
+    public void onAccountCreated(Account account) {
+        Intent intent = new Intent(this, EditAccountActivity.class);
+        intent.putExtra("jid", account.getJid().asBareJid().toString());
+        intent.putExtra("init", true);
+        startActivity(intent);
+        overridePendingTransition(R.animator.fade_in, R.animator.fade_out);
+    }
+
+        @Override
+    public void informUser(final int r) {
+        runOnUiThread(() -> ToastCompat.makeText(WelcomeActivity.this, r, Toast.LENGTH_LONG).show());
     }
 
     public void addInviteUri(Intent to) {
@@ -204,4 +236,4 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
             }
         }
     }
-}
\ No newline at end of file
+}
