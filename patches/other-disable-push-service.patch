From 606c53eaee3d0921de922b34db2c13e5af940a24 Mon Sep 17 00:00:00 2001
From: Martin/Geno <geno+dev@fireorbit.de>
Date: Sat, 10 Nov 2018 22:21:09 +0100
Subject: [PATCH] Remove PushService

---
 .../services/XmppConnectionService.java       |  25 -----
 .../messenger/ui/ConversationsActivity.java   |  15 +--
 .../messenger/ui/EditAccountActivity.java     |   9 +-
 .../messenger/services/InstanceIdService.java |  15 ---
 .../services/MaintenanceReceiver.java         |  37 -------
 .../services/PushManagementService.java       | 100 ------------------
 .../services/PushMessageReceiver.java         |  27 -----
 7 files changed, 3 insertions(+), 225 deletions(-)
 delete mode 100644 src/standardPush/java/de/pixart/messenger/services/InstanceIdService.java
 delete mode 100644 src/standardPush/java/de/pixart/messenger/services/MaintenanceReceiver.java
 delete mode 100644 src/standardPush/java/de/pixart/messenger/services/PushManagementService.java
 delete mode 100644 src/standardPush/java/de/pixart/messenger/services/PushMessageReceiver.java

diff --git a/src/main/java/de/pixart/messenger/services/XmppConnectionService.java b/src/main/java/de/pixart/messenger/services/XmppConnectionService.java
index 3588f836b..825a5abb9 100644
--- a/src/main/java/de/pixart/messenger/services/XmppConnectionService.java
+++ b/src/main/java/de/pixart/messenger/services/XmppConnectionService.java
@@ -172,8 +172,6 @@
     public static final String ACTION_TRY_AGAIN = "try_again";
     public static final String ACTION_DISMISS_ERROR_NOTIFICATIONS = "dismiss_error";
     public static final String ACTION_IDLE_PING = "idle_ping";
-    public static final String ACTION_FCM_TOKEN_REFRESH = "fcm_token_refresh";
-    public static final String ACTION_FCM_MESSAGE_RECEIVED = "fcm_message_received";
     public static final String FDroid = "org.fdroid.fdroid";
     public static final String PlayStore = "com.android.vending";
     private static final String SETTING_LAST_ACTIVITY_TS = "last_activity_timestamp";
@@ -285,7 +283,6 @@ public void onJinglePacketReceived(Account account, JinglePacket packet) {
     };
     private AvatarService mAvatarService = new AvatarService(this);
     private MessageArchiveService mMessageArchiveService = new MessageArchiveService(this);
-    private PushManagementService mPushManagementService = new PushManagementService(this);
     private final OnBindListener mOnBindListener = new OnBindListener() {
 
         @Override
@@ -319,9 +316,6 @@ public void onBind(final Account account) {
                 });
             }
             sendPresence(account);
-            if (mPushManagementService.available(account)) {
-                mPushManagementService.registerPushTokenOnServer(account);
-            }
             connectMultiModeConversations(account);
             syncDirtyContacts(account);
         }
@@ -665,18 +659,11 @@ public int onStartCommand(Intent intent, int flags, int startId) {
                         refreshAllPresences();
                     }
                     break;
-                case ACTION_FCM_TOKEN_REFRESH:
-                    refreshAllFcmTokens();
-                    break;
                 case ACTION_IDLE_PING:
                     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                         scheduleNextIdlePing();
                     }
                     break;
-                case ACTION_FCM_MESSAGE_RECEIVED:
-                    pushedAccountHash = intent.getStringExtra("account");
-                    Log.d(Config.LOGTAG, "push message arrived in service. account=" + pushedAccountHash);
-                    break;
                 case Intent.ACTION_SEND:
                     Uri uri = intent.getData();
                     if (uri != null) {
@@ -4016,14 +4003,6 @@ public void refreshAllPresences() {
         }
     }
 
-    private void refreshAllFcmTokens() {
-        for (Account account : getAccounts()) {
-            if (account.isOnlineAndConnected() && mPushManagementService.available(account)) {
-                mPushManagementService.registerPushTokenOnServer(account);
-            }
-        }
-    }
-
     private void sendOfflinePresence(final Account account) {
         Log.d(Config.LOGTAG, account.getJid().asBareJid() + ": sending offline presence");
         sendPresencePacket(account, mPresenceGenerator.sendOfflinePresence(account));
@@ -4281,10 +4260,6 @@ public void fetchMamPreferences(Account account, final OnMamPreferencesFetched c
         });
     }
 
-    public PushManagementService getPushManagementService() {
-        return mPushManagementService;
-    }
-
     public Account getPendingAccount() {
         Account pending = null;
         for (Account account : getAccounts()) {
diff --git a/src/main/java/de/pixart/messenger/ui/ConversationsActivity.java b/src/main/java/de/pixart/messenger/ui/ConversationsActivity.java
index 787942b8d..cf1104dde 100644
--- a/src/main/java/de/pixart/messenger/ui/ConversationsActivity.java
+++ b/src/main/java/de/pixart/messenger/ui/ConversationsActivity.java
@@ -299,8 +299,7 @@ private void setNeverAskForBatteryOptimizationsAgain() {
     }
 
     private void openBatteryOptimizationDialogIfNeeded() {
-        if (hasAccountWithoutPush()
-                && isOptimizingBattery()
+        if (isOptimizingBattery()
                 && getPreferences().getBoolean(getBatteryOptimizationPreferenceKey(), true)) {
             AlertDialog.Builder builder = new AlertDialog.Builder(this);
             builder.setTitle(R.string.battery_optimizations_enabled);
@@ -324,16 +323,6 @@ private void openBatteryOptimizationDialogIfNeeded() {
         }
     }
 
-    private boolean hasAccountWithoutPush() {
-        for (Account account : xmppConnectionService.getAccounts()) {
-            if (account.getStatus() == Account.State.ONLINE && !xmppConnectionService.getPushManagementService().available(account)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-
     private void notifyFragmentOfBackendConnected(@IdRes int id) {
         final Fragment fragment = getFragmentManager().findFragmentById(id);
         if (fragment instanceof OnBackendConnected) {
@@ -988,4 +977,4 @@ protected void AppUpdate(String Store) {
             Log.d(Config.LOGTAG, "AppUpdater stopped");
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/de/pixart/messenger/ui/EditAccountActivity.java b/src/main/java/de/pixart/messenger/ui/EditAccountActivity.java
index 775e8f6dc..3106f20bb 100644
--- a/src/main/java/de/pixart/messenger/ui/EditAccountActivity.java
+++ b/src/main/java/de/pixart/messenger/ui/EditAccountActivity.java
@@ -1008,7 +1008,7 @@ private void updateAccountInformation(boolean init) {
         if (this.mAccount.isOnlineAndConnected() && !this.mFetchingAvatar) {
             Features features = this.mAccount.getXmppConnection().getFeatures();
             this.binding.stats.setVisibility(View.VISIBLE);
-            boolean showBatteryWarning = !xmppConnectionService.getPushManagementService().available(mAccount) && isOptimizingBattery();
+            boolean showBatteryWarning = isOptimizingBattery();
             boolean showDataSaverWarning = isAffectedByDataSaver();
             showOsOptimizationWarning(showBatteryWarning, showDataSaverWarning);
             this.binding.sessionEst.setText(UIHelper.readableTimeDifferenceFull(this, this.mAccount.getXmppConnection()
@@ -1068,13 +1068,6 @@ private void updateAccountInformation(boolean init) {
                 this.binding.serverInfoHttpUpload.setText(R.string.server_info_unavailable);
             }
 
-            this.binding.pushRow.setVisibility(xmppConnectionService.getPushManagementService().isStub() ? View.GONE : View.VISIBLE);
-
-            if (xmppConnectionService.getPushManagementService().available(mAccount)) {
-                this.binding.serverInfoPush.setText(R.string.server_info_available);
-            } else {
-                this.binding.serverInfoPush.setText(R.string.server_info_unavailable);
-            }
             final long pgpKeyId = this.mAccount.getPgpId();
             if (pgpKeyId != 0 && Config.supportOpenPgp()) {
                 OnClickListener openPgp = view -> launchOpenKeyChain(pgpKeyId);
diff --git a/src/standardPush/java/de/pixart/messenger/services/InstanceIdService.java b/src/standardPush/java/de/pixart/messenger/services/InstanceIdService.java
deleted file mode 100644
index 3e9a00a3c..000000000
--- a/src/standardPush/java/de/pixart/messenger/services/InstanceIdService.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package de.pixart.messenger.services;
-
-import android.content.Intent;
-
-import com.google.firebase.iid.FirebaseInstanceIdService;
-
-public class InstanceIdService extends FirebaseInstanceIdService {
-
-    @Override
-    public void onTokenRefresh() {
-        Intent intent = new Intent(this, XmppConnectionService.class);
-        intent.setAction(XmppConnectionService.ACTION_FCM_TOKEN_REFRESH);
-        startService(intent);
-    }
-}
diff --git a/src/standardPush/java/de/pixart/messenger/services/MaintenanceReceiver.java b/src/standardPush/java/de/pixart/messenger/services/MaintenanceReceiver.java
deleted file mode 100644
index 9368913bc..000000000
--- a/src/standardPush/java/de/pixart/messenger/services/MaintenanceReceiver.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package de.pixart.messenger.services;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.util.Log;
-
-import com.google.firebase.iid.FirebaseInstanceId;
-
-import java.io.IOException;
-
-import de.pixart.messenger.Config;
-
-public class MaintenanceReceiver extends BroadcastReceiver {
-    @Override
-    public void onReceive(Context context, Intent intent) {
-        Log.d(Config.LOGTAG, "received intent in maintenance receiver");
-        if ("eu.siacs.conversations.RENEW_INSTANCE_ID".equals(intent.getAction())) {
-            renewInstanceToken(context);
-
-        }
-    }
-
-    private void renewInstanceToken(final Context context) {
-        new Thread(() -> {
-            try {
-                FirebaseInstanceId.getInstance().deleteInstanceId();
-                Intent intent = new Intent(context, XmppConnectionService.class);
-                intent.setAction(XmppConnectionService.ACTION_FCM_TOKEN_REFRESH);
-                context.startService(intent);
-            } catch (IOException e) {
-                Log.d(Config.LOGTAG, "unable to renew instance token", e);
-            }
-        }).start();
-
-    }
-}
\ No newline at end of file
diff --git a/src/standardPush/java/de/pixart/messenger/services/PushManagementService.java b/src/standardPush/java/de/pixart/messenger/services/PushManagementService.java
deleted file mode 100644
index 7daa552d4..000000000
--- a/src/standardPush/java/de/pixart/messenger/services/PushManagementService.java
+++ /dev/null
@@ -1,100 +0,0 @@
-package de.pixart.messenger.services;
-
-import android.util.Log;
-
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-import com.google.firebase.iid.FirebaseInstanceId;
-
-import de.pixart.messenger.Config;
-import de.pixart.messenger.R;
-import de.pixart.messenger.entities.Account;
-import de.pixart.messenger.utils.Namespace;
-import de.pixart.messenger.utils.PhoneHelper;
-import de.pixart.messenger.xml.Element;
-import de.pixart.messenger.xmpp.XmppConnection;
-import de.pixart.messenger.xmpp.forms.Data;
-import de.pixart.messenger.xmpp.stanzas.IqPacket;
-import rocks.xmpp.addr.Jid;
-
-public class PushManagementService {
-
-    protected final XmppConnectionService mXmppConnectionService;
-
-    PushManagementService(XmppConnectionService service) {
-        this.mXmppConnectionService = service;
-    }
-
-    void registerPushTokenOnServer(final Account account) {
-        Log.d(Config.LOGTAG, account.getJid().asBareJid() + ": has push support");
-        retrieveFcmInstanceToken(token -> {
-            final String androidId = PhoneHelper.getAndroidId(mXmppConnectionService);
-            final Jid appServer = Jid.of(mXmppConnectionService.getString(R.string.app_server));
-            IqPacket packet = mXmppConnectionService.getIqGenerator().pushTokenToAppServer(appServer, token, androidId);
-            mXmppConnectionService.sendIqPacket(account, packet, (a, p) -> {
-                Element command = p.findChild("command", "http://jabber.org/protocol/commands");
-                if (p.getType() == IqPacket.TYPE.RESULT && command != null) {
-                    Element x = command.findChild("x", Namespace.DATA);
-                    if (x != null) {
-                        Data data = Data.parse(x);
-                        try {
-                            String node = data.getValue("node");
-                            String secret = data.getValue("secret");
-                            Jid jid = Jid.of(data.getValue("jid"));
-                            if (node != null && secret != null) {
-                                enablePushOnServer(a, jid, node, secret);
-                            }
-                        } catch (IllegalArgumentException e) {
-                            e.printStackTrace();
-                        }
-                    }
-                } else {
-                    Log.d(Config.LOGTAG, a.getJid().asBareJid() + ": invalid response from app server");
-                }
-            });
-        });
-    }
-
-    private void enablePushOnServer(final Account account, final Jid jid, final String node, final String secret) {
-        IqPacket enable = mXmppConnectionService.getIqGenerator().enablePush(jid, node, secret);
-        mXmppConnectionService.sendIqPacket(account, enable, (a, p) -> {
-            if (p.getType() == IqPacket.TYPE.RESULT) {
-                Log.d(Config.LOGTAG, a.getJid().asBareJid() + ": successfully enabled push on server");
-            } else if (p.getType() == IqPacket.TYPE.ERROR) {
-                Log.d(Config.LOGTAG, a.getJid().asBareJid() + ": enabling push on server failed");
-            }
-        });
-    }
-
-    private void retrieveFcmInstanceToken(final OnGcmInstanceTokenRetrieved instanceTokenRetrieved) {
-        new Thread(() -> {
-            try {
-                instanceTokenRetrieved.onGcmInstanceTokenRetrieved(FirebaseInstanceId.getInstance().getToken());
-            } catch (Exception e) {
-                Log.d(Config.LOGTAG, "unable to get push token", e);
-            }
-        }).start();
-
-    }
-
-
-    public boolean available(Account account) {
-        final XmppConnection connection = account.getXmppConnection();
-        return connection != null
-                && connection.getFeatures().sm()
-                && connection.getFeatures().push()
-                && playServicesAvailable();
-    }
-
-    private boolean playServicesAvailable() {
-        return GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(mXmppConnectionService) == ConnectionResult.SUCCESS;
-    }
-
-    public boolean isStub() {
-        return false;
-    }
-
-    interface OnGcmInstanceTokenRetrieved {
-        void onGcmInstanceTokenRetrieved(String token);
-    }
-}
\ No newline at end of file
diff --git a/src/standardPush/java/de/pixart/messenger/services/PushMessageReceiver.java b/src/standardPush/java/de/pixart/messenger/services/PushMessageReceiver.java
deleted file mode 100644
index 816d11118..000000000
--- a/src/standardPush/java/de/pixart/messenger/services/PushMessageReceiver.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package de.pixart.messenger.services;
-
-import android.content.Intent;
-import android.util.Log;
-
-import com.google.firebase.messaging.FirebaseMessagingService;
-import com.google.firebase.messaging.RemoteMessage;
-
-import java.util.Map;
-
-import de.pixart.messenger.Config;
-
-public class PushMessageReceiver extends FirebaseMessagingService {
-
-    @Override
-    public void onMessageReceived(RemoteMessage message) {
-        if (!EventReceiver.hasEnabledAccounts(this)) {
-            Log.d(Config.LOGTAG, "PushMessageReceiver ignored message because no accounts are enabled");
-            return;
-        }
-        Map<String, String> data = message.getData();
-        Intent intent = new Intent(this, XmppConnectionService.class);
-        intent.setAction(XmppConnectionService.ACTION_FCM_MESSAGE_RECEIVED);
-        intent.putExtra("account", data.get("account"));
-        startService(intent);
-    }
-}
